SET SERVEROUTPUT ON
CREATE TABLE tipo_correo(
    tipo_correoID number (10),
    descripcion varchar2 (75) not null,
    CONSTRAINT tipo_correoID_pk PRIMARY KEY (tipo_correoID));
CREATE TABLE tipo_telefono(
    telefonoID number (10),
    descripcion varchar2 (50) not null,
    CONSTRAINT telefonoID_pk PRIMARY KEY (telefonoID));
CREATE TABLE tipo_de_prestamo(
    tipo_prestamoID number (10),
    tipo_prestamo varchar2 (200) NOT NULL,
    CONSTRAINT id_tipo_prestamo_pk PRIMARY KEY (tipo_prestamoID));
CREATE TABLE profesion(
    id_profesion number(10),
    profesion VARCHAR2(150) NOT NULL,
    CONSTRAINT id_profesion PRIMARY KEY (id_profesion));
CREATE TABLE cliente(
    clienteID number(10),
    cedula varchar2(12) not null,
    nombre varchar2(25) not null,
    apellido varchar2(25) not null,
    sexo char not null,
    id_profesion number (10),
    fecha_nacimiento date,
    CONSTRAINT clienteID PRIMARY KEY (clienteID),
    CONSTRAINT fk_id_profesion FOREIGN KEY (id_profesion) REFERENCES profesion(id_profesion));
CREATE TABLE correo(
    clienteID number(10),
    tipo_correoID number (10),
    correo VARCHAR2(100) not null,
    CONSTRAINT clienteID_tipo_correo_pk PRIMARY KEY (clienteID,tipo_correoID),
    CONSTRAINT clienteID_correo_fk FOREIGN KEY (clienteID) REFERENCES cliente(clienteID),
    CONSTRAINT tipo_correoID_fk FOREIGN KEY (tipo_correoID) REFERENCES tipo_correo(tipo_correoID));
CREATE TABLE telefono(
    clienteID number(10),
    telefonoID number (10),
    telefono varchar (9) not null,
    CONSTRAINT clienteID_telefonoID_pk PRIMARY KEY (clienteID,telefonoID),
    CONSTRAINT clienteID_telefono_fk FOREIGN KEY (clienteID) REFERENCES cliente(clienteID),
    CONSTRAINT telefonoID_fk FOREIGN KEY (telefonoID) REFERENCES tipo_telefono(telefonoID));
CREATE TABLE prestamo(
    clienteID number(10),
    tipo_prestamoID number (10),
    numero_prestamo number (10) NOT NULL,
    fecha_aprobado date NOT NULL,
    monto_aprobado number (13) NOT NULL,
    tasa_interes varchar2 (10) NOT NULL,
    letra_mensual number (10) NOT NULL,
    monto_pagado number (13) NOT NULL,
    fecha_pago date NOT NULL,
    CONSTRAINT clienteID_id_tipo_prestamo_pk PRIMARY KEY (clienteID,tipo_prestamoID),
    CONSTRAINT fk_cliente_id FOREIGN KEY (clienteID) REFERENCES cliente(clienteID),
    CONSTRAINT fk_tipo_prestamo FOREIGN KEY (tipo_prestamoID) REFERENCES tipo_de_prestamo(tipo_prestamoID));
ALTER TABLE cliente ADD edad number(3) not null;
CREATE TABLE sucursal( 
    cod_sucursal number(10), 
    nombre_sucursal VARCHAR2(75) NOT NULL,  
    monto_prestamos number(10) NOT NULL,
    cantidad number (10) NOT NULL, 
    CONSTRAINT cod_sucursal PRIMARY KEY (cod_sucursal));
CREATE TABLE Sucursal_tipo_prestamo(
    cod_sucursal number(10),
    tipo_prestamoID number (10),
    monto_prestamos number(10) NOT NULL,
    cantidad number (10) NOT NULL, 
    CONSTRAINT pk_sucursal_prestamoID PRIMARY KEY (cod_sucursal,tipo_prestamoID),
    CONSTRAINT fk_cod_sucursal FOREIGN KEY (cod_sucursal) REFERENCES sucursal(cod_sucursal),
    CONSTRAINT fk_tipo_prestamo_sucursal FOREIGN KEY (tipo_prestamoID) REFERENCES tipo_de_prestamo(tipo_prestamoID));
ALTER TABLE cliente ADD cod_sucursal number(10) NOT NULL; 
ALTER TABLE cliente ADD CONSTRAINT fk_cod_sucursal_cliente FOREIGN KEY (cod_sucursal) REFERENCES sucursal(cod_sucursal); 
ALTER TABLE prestamo ADD cod_sucursal number(10) NOT NULL; 
ALTER TABLE prestamo ADD CONSTRAINT fk_cod_sucursalprestamo FOREIGN KEY (cod_sucursal) REFERENCES sucursal(cod_sucursal); 
Alter table prestamo ADD saldoactual number (10) NOT NULL;
Alter table prestamo ADD interespagado number (10) NOT NULL;
Alter table prestamo ADD fechamodificacion date NOT NULL;
Alter table prestamo ADD usuario VARCHAR2 (50) NOT NULL;
CREATE TABLE transacpagos(
    cod_sucursal number(10),
    id_transaccion number(10),
    clienteID number(10),
    tipo_prestamoID number (10),
    fecha_transaccion date NOT NULL,
    monto_del_pago number(10) NOT NULL, 
    fecha_insercion date NOT NULL,
    usuario Varchar2 (50) NOT NULL,
    status char (1) default 'N' NOT NULL,
    CONSTRAINT pk_id_transaccion PRIMARY KEY (id_transaccion),
    CONSTRAINT fk_cod_sucursal_2 FOREIGN KEY (cod_sucursal) REFERENCES sucursal(cod_sucursal),
    CONSTRAINT fk_tipo_prestamo_trans FOREIGN KEY (tipo_prestamoID) REFERENCES tipo_de_prestamo(tipo_prestamoID),
    CONSTRAINT fk_clienteID_trans FOREIGN KEY (clienteID) REFERENCES cliente(clienteID));
CREATE SEQUENCE secuencia_cliente
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_prestamo
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_sucursal
   START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_profesion
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_correo
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_telefono
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_transaccion
    START WITH 1
    INCREMENT BY 1;
ALTER SESSION SET nls_date_format='DD-MM-YYYY HH24:MI:SS';
CREATE OR REPLACE PROCEDURE tipo_telefonos(
p_descripcion IN Tipo_telefono.Descripcion%TYPE) IS
BEGIN
INSERT INTO tipo_telefono (telefonoID, descripcion)values
(secuencia_telefono.nextval,p_descripcion);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END tipo_telefonos;
/
BEGIN 
tipo_telefonos('Celular');
END;
/
BEGIN 
tipo_telefonos('Residencial');
END;
/
BEGIN 
tipo_telefonos('Celular de familiar cercano');
END;
/
BEGIN 
tipo_telefonos('Celular de conyugue');
END;
/
CREATE OR REPLACE PROCEDURE tipo_correos(
p_descripcion IN  tipo_correo.descripcion%TYPE) IS
BEGIN 
INSERT INTO tipo_correo(tipo_correoID, descripcion) values
(secuencia_correo.nextval,p_descripcion);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END tipo_correos;
/
BEGIN 
tipo_correos('Personal');
END;
/
BEGIN 
tipo_correos('Laboral');
END;
/
BEGIN 
tipo_correos('Academico');
END;
/
CREATE OR REPLACE PROCEDURE tipo_profesion(
p_profesion IN profesion.profesion%TYPE) IS
BEGIN 
INSERT INTO profesion(id_profesion,profesion) values
(secuencia_profesion.nextval,p_profesion);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END tipo_profesion;
/
BEGIN 
tipo_profesion('Camarero');
END;
/
BEGIN 
tipo_profesion('Marinero');
END;
/
BEGIN 
tipo_profesion('Cajero');
END;
/
BEGIN 
tipo_profesion('Ingeniero');
END;
/
CREATE OR REPLACE PROCEDURE tipo_sucursal(
p_nombre_sucursal IN  sucursal.nombre_sucursal%TYPE) IS
BEGIN 
INSERT INTO sucursal(cod_sucursal,nombre_sucursal,monto_prestamos,cantidad) values
(secuencia_sucursal.nextval,p_nombre_sucursal,0,0);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END tipo_sucursal;
/
BEGIN 
tipo_sucursal('Dorado');
END;
/
BEGIN 
tipo_sucursal('Altaplaza');
END;
/
BEGIN 
tipo_sucursal('Albrook');
END;
/
CREATE OR REPLACE PROCEDURE tipo_prestamo(
p_tipo_prestamo IN  tipo_de_prestamo.tipo_prestamo%TYPE) IS
BEGIN 
INSERT INTO tipo_de_prestamo(tipo_prestamoID,tipo_prestamo) values
(secuencia_prestamo.nextval,p_tipo_prestamo);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END tipo_prestamo;
/
BEGIN 
tipo_prestamo('Personal');
END;
/
BEGIN 
tipo_prestamo('Automovil');
END;
/
BEGIN 
tipo_prestamo('Hipotecario');
END;
/
BEGIN 
tipo_prestamo('Dedicado para ahorros');
END;
/
CREATE OR REPLACE FUNCTION calcular_edad(p_calculo_edad IN cliente.fecha_nacimiento%TYPE) 
RETURN NUMBER
AS
v_edad NUMBER;
BEGIN
SELECT FLOOR(months_between(sysdate,p_calculo_edad)/12) INTO v_edad FROM dual;
RETURN v_edad;
END calcular_edad;
/
CREATE OR REPLACE PROCEDURE insertar_cliente(
p_cedula IN cliente.cedula%TYPE,
p_nombre IN cliente.nombre%TYPE,
p_apellido IN cliente.apellido%TYPE,
p_sexo IN cliente.sexo%TYPE,
p_profesion IN cliente.id_profesion%TYPE,
p_fechanacimiento IN cliente.fecha_nacimiento%TYPE,
p_sucursal IN cliente.cod_sucursal%TYPE) IS 
BEGIN
INSERT INTO cliente (clienteID, cedula, nombre, apellido, sexo, id_profesion, fecha_nacimiento, cod_sucursal, edad) values
(SECUENCIA_CLIENTE.nextval,p_cedula,p_nombre,p_apellido,p_sexo,p_profesion,p_fechanacimiento,p_sucursal, calcular_edad(p_fechanacimiento));
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
end insertar_cliente;
/
BEGIN
    insertar_cliente('8-977-47','Joel','Aparicio','M',1,TO_DATE('01/12/1994','DD/MM/YYYY'),1);
END;
/
BEGIN
    insertar_cliente('8-973-789','Airlenys','Recuero','F',2,TO_DATE('01/07/1999','DD/MM/YYYY'),2);
END;
/
BEGIN
    insertar_cliente('8-923-2393','Michael','Cerrud','M',3,TO_DATE('01/06/1997','DD/MM/YYYY'),1);
END;
/
BEGIN
    insertar_cliente('8-991-4938','Gariela','Vasquez','F',4,TO_DATE('26/03/2001','DD/MM/YYYY'),2);
END;
/
CREATE OR REPLACE PROCEDURE insertar_correo(
    p_id_cliente IN correo.clienteid%TYPE,
    p_cod_email IN correo.tipo_correoid%TYPE,
    p_email IN  correo.correo%TYPE) IS
BEGIN 
    INSERT INTO correo 
    VALUES(p_id_cliente, p_cod_email, p_email);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
     DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END insertar_correo;
/
BEGIN 
insertar_correo(1, 1, 'emily.fong@gmail.com');
END;
/
BEGIN 
insertar_correo(1, 3, 'carlos.restrepo@gmail.com');
END;
/
BEGIN 
insertar_correo(3, 1, 'ariel.gutierrez@gmail.com');
END;
/
BEGIN 
insertar_correo(3, 3, 'cesar.rodriguez@gmail.com');
END;
/
BEGIN 
insertar_correo(2, 1, 'cecydi.bethancourt@gmail.com');
END;
/
BEGIN 
insertar_correo(2, 3, 'agustin2649@gmail.com');
END;
/
BEGIN 
insertar_correo(4, 1, 'estefanyH284@gmail.com');
END;
/
BEGIN 
insertar_correo(4, 3, 'henryquintana@gmail.com');
END;
/
CREATE OR REPLACE PROCEDURE insertar_telefono(
    p_id_cliente IN Telefono.clienteid%TYPE,
    p_Cod_tel IN Telefono.telefonoid%TYPE,
    p_telefono IN  Telefono.Telefono%TYPE) IS
BEGIN 
    INSERT INTO Telefono 
    VALUES(p_id_cliente, p_Cod_tel, p_telefono);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END insertar_telefono;
/
BEGIN 
insertar_telefono(1, 1, '7463-4583');
END;
/
BEGIN 
insertar_telefono(3, 1, '6027-1276');
END;
/
BEGIN 
insertar_telefono(3, 2, '620-7932');
END;
/
BEGIN 
insertar_telefono(2, 1, '6017-7294');
END;
/
BEGIN 
insertar_telefono(2, 4, '6183-7924');
END;
/
BEGIN 
insertar_telefono(4, 2, '604-8720');
END;
/
BEGIN 
insertar_telefono(4, 3, '6123-8402');
END;
/
QUEDE AQUI EL JUEVES
CREATE OR REPLACE PROCEDURE insersion_prestamo(
    p_clienteid IN prestamo.clienteID%TYPE,
    p_tipo_prestamo IN prestamo.tipo_prestamoid%TYPE,
    p_fecha_aprobado IN prestamo.fecha_aprobado%TYPE,
    p_monto_aprobado IN prestamo.monto_aprobado%TYPE,
    p_tasa_interes IN prestamo.tasa_interes%TYPE,
    p_letra_mensual IN prestamo.letra_mensual%TYPE,
    p_cod_sucursal IN prestamo.cod_sucursal%TYPE) IS
BEGIN
    INSERT INTO prestamo (clienteid, tipo_prestamoID, numero_prestamo, fecha_aprobado, monto_aprobado, tasa_interes, letra_mensual, monto_pagado, fecha_pago,cod_sucursal,saldoactual, interespagado, fechamodificacion, usuario)  values 
    (p_clienteid,p_tipo_prestamo, SECUENCIA_PRESTAMO.nextval, p_fecha_aprobado, p_monto_aprobado, p_tasa_interes, p_letra_mensual, 0, p_fecha_aprobado ,p_cod_sucursal,p_monto_aprobado, 0, p_fecha_aprobado, user);
UPDATE sucursal
SET monto_prestamos = monto_prestamos + p_monto_aprobado,
    cantidad = cantidad + 1
WHERE cod_sucursal = p_cod_sucursal;
UPDATE Sucursal_tipo_prestamo
SET monto_prestamos = monto_prestamos + p_monto_aprobado,
    cantidad = cantidad + 1
WHERE tipo_prestamoID = p_tipo_prestamo;
IF SQL%NOTFOUND THEN
    INSERT INTO Sucursal_tipo_prestamo(cod_sucursal, tipo_prestamoid, monto_prestamos, cantidad)
    VALUES (p_cod_sucursal, p_tipo_prestamo, p_monto_aprobado, 1);
END IF;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END insersion_prestamo;
/
Begin
    insersion_prestamo(3,1,TO_DATE('09/03/2021 19:23:12','DD/MM/YYYY HH24:MI:SS'),10000,0.05,500,1);
end;
/
Begin
    insersion_prestamo(2,2,TO_DATE('07/03/2021 23:49:13','DD/MM/YYYY HH24:MI:SS'),30000,0.03,2000,1);
end;
/
Begin
    insersion_prestamo(1,1,TO_DATE('08/03/2021 01:53:08','DD/MM/YYYY HH24:MI:SS'),15000,0.11,1500,2);
end;
/
CREATE OR REPLACE PROCEDURE insertar_transaccion (
    p_cod_sucursal      IN  transacpagos.cod_sucursal%TYPE,
    p_id_cliente        IN  transacpagos.clienteid%TYPE,
    p_tipo_prestamo     IN  transacpagos.tipo_prestamoid%TYPE,
    p_fecha_transaccion IN  transacpagos.fecha_transaccion%TYPE,
    p_monto_del_pago    IN  transacpagos.monto_del_pago%TYPE) IS  
BEGIN
INSERT INTO transacpagos (id_transaccion,cod_sucursal, clienteid, tipo_prestamoid, fecha_transaccion, monto_del_pago, fecha_insercion, usuario, status)
VALUES (secuencia_transaccion.nextval, p_cod_sucursal, p_id_cliente, p_tipo_prestamo, p_fecha_transaccion, p_monto_del_pago,sysdate, user,'N');
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END insertar_transaccion;
/
BEGIN
insertar_transaccion (2,2,3,TO_DATE('08/04/2021','DD/MM/YYYY'),2500); 
END;
/
BEGIN
insertar_transaccion (1,3,1,TO_DATE('09/04/2021','DD/MM/YYYY'),1000); 
END;
/
BEGIN
insertar_transaccion (1,1,1,TO_DATE('07/04/2021','DD/MM/YYYY'),2000); 
END;
/
CREATE OR REPLACE FUNCTION calculo_interes(
    p_saldo_actual IN prestamo.saldoactual%TYPE,
    p_tasa IN prestamo.tasa_interes%TYPE)
    RETURN prestamo.interespagado%TYPE IS 
BEGIN
    RETURN p_Saldo_actual*p_tasa;
END calculo_interes;
/
CREATE OR REPLACE PROCEDURE actualizacion_pago AS
v_cod_sucursal      transacpagos.cod_sucursal%TYPE;
v_cliente           transacpagos.clienteid%TYPE;
v_Tipo_Prestamo     transacpagos.tipo_prestamoid%TYPE;
v_Montodepago       transacpagos.monto_del_pago%TYPE;
v_id_transaccion    transacpagos.id_transaccion%TYPE;
v_fechatransaccion  transacpagos.fecha_transaccion%TYPE;
v_Saldo_actual      Prestamo.Saldoactual%TYPE;
v_tasa              Prestamo.Tasa_interes%TYPE;
v_interespagado     prestamo.interespagado%TYPE;
v_interes           Prestamo.interespagado%TYPE;
V_sobrante number;
CURSOR c_actualizar_pagos IS
SELECT cod_sucursal, clienteID, tipo_prestamoid, Monto_del_pago, Id_Transaccion, Fecha_transaccion
FROM Transacpagos
WHERE STATUS = 'n';
BEGIN
    OPEN c_actualizar_pagos;
    LOOP
        FETCH c_actualizar_pagos INTO v_cod_sucursal, v_cliente, v_Tipo_Prestamo, v_Montodepago, v_id_transaccion, v_fechatransaccion;
        EXIT WHEN c_actualizar_pagos%NOTFOUND;
        SELECT Saldoactual,tasa_interes, interespagado
        INTO v_Saldo_actual, v_tasa, v_interespagado
        FROM PRESTAMO
        WHERE clienteID = v_cliente AND tipo_prestamoid = V_Tipo_Prestamo;
        v_interes:=calculo_interes(v_Saldo_actual,v_tasa);
        IF v_interes> v_interespagado THEN
            V_sobrante:= v_Montodepago-(v_interes-v_interespagado);
            IF V_sobrante>=0 THEN
                UPDATE Prestamo
                SET 
                interespagado=interespagado+(v_Montodepago-V_sobrante),
                saldoactual=saldoactual-V_sobrante, 
                Monto_Pagado= monto_pagado + V_sobrante,
                Fechamodificacion = sysdate,
                Fecha_pago = v_fechatransaccion
                WHERE clienteID = v_cliente AND tipo_prestamoid=v_Tipo_Prestamo;
                UPDATE Sucursal 
                SET Monto_prestamos=monto_prestamos-V_sobrante
                WHERE Cod_sucursal = v_Cod_sucursal;

                UPDATE Sucursal_Tipo_prestamo 
                SET Monto_prestamos=monto_prestamos-V_sobrante
                WHERE Cod_sucursal = v_Cod_sucursal AND tipo_prestamoid = V_Tipo_Prestamo;
            ELSE
                UPDATE Prestamo
                SET 
                Interespagado=interespagado+v_Montodepago,
                Fechamodificacion = sysdate,
                Fecha_pago = v_fechatransaccion
                WHERE clienteID = v_cliente AND tipo_prestamoid=v_Tipo_Prestamo; 
            END IF;
        ELSE
            UPDATE Prestamo
            SET 
            saldoactual=saldoactual-v_Montodepago, 
            Monto_Pagado= monto_pagado + v_Montodepago,
            Fechamodificacion = sysdate,
            Fecha_pago = v_fechatransaccion
            WHERE clienteID = v_cliente AND tipo_prestamoid=v_Tipo_Prestamo;

            UPDATE Sucursal 
            SET Monto_prestamos=monto_prestamos-v_Montodepago
            WHERE Cod_sucursal = v_Cod_sucursal;

            UPDATE sucursal_tipo_prestamo 
            SET Monto_prestamos=monto_prestamos-v_Montodepago
            WHERE Cod_sucursal = v_Cod_sucursal AND tipo_prestamoid = V_Tipo_Prestamo;
    END IF;
    UPDATE transacpagos
    SET Status='S'
    WHERE Id_Transaccion=v_id_transaccion;
    END LOOP;
    CLOSE c_actualizar_pagos;
EXCEPTION
    WHEN CURSOR_ALREADY_OPEN THEN
      DBMS_OUTPUT.PUT_LINE('CURSOR YA ABIERTO.');
END actualizacion_pago;
/
BEGIN
actualizacion_pago;
END;
/
create or replace view prestamo_cliente as
select c.clienteid as "Codigo de cliente",c.nombre || ' ' ||c.apellido as "Cliente", t.tipo_prestamo as "Tipo de prestamo",p.fecha_aprobado as "Fecha de aprobacion",
p.monto_aprobado as "Monto aprobado", s.nombre_sucursal as "Sucursal"
from cliente c , tipo_de_prestamo t, prestamo p, sucursal s
where c.clienteid = p.clienteid and t.tipo_prestamoid = p.tipo_prestamoid and c.cod_sucursal = s.cod_sucursal
order by c.clienteid asc;

select * from prestamo_cliente;

create or replace view sucursal_prestamo as
select s.nombre_sucursal as "Sucursal", s.monto_prestamos as "Prestamos por sucursal",
       s.cantidad as "Cantidad de prestamos", t.monto_prestamos as "Monto de prestamo",d.tipo_prestamo as "Tipo de prestamo",t.cantidad as "Cantidad de tipo prestamo",
       p.usuario as "Usuario"
from sucursal s, sucursal_tipo_prestamo t,prestamo p, tipo_de_prestamo d
where s.cod_sucursal=p.cod_sucursal and t.tipo_Prestamoid = d.tipo_prestamoid and p.tipo_prestamoid=d.tipo_prestamoid;

select * from sucursal_prestamo;


