CREATE TABLE tipo_de_ahorro(
    id_tipo_ahorro 			number (10) NOT NULL,
    descripcion 			varchar2 (200) NOT NULL,
    tasa_interes 			number (10) NOT NULL,
    CONSTRAINT id_tipo_ahorro_pk PRIMARY KEY (ID_tipo_ahorro));

CREATE TABLE Sucursal_tipo_ahorro(
    id_sucursal         number(10),
    id_tipo_ahorro      number (10),
    monto_ahorrado      number(10) NOT NULL,
    cantidad_tipo_ahorro     number (10) NOT NULL, 
    CONSTRAINT id_sucursal_ahorro_pk PRIMARY KEY (id_sucursal,id_tipo_ahorro),
    CONSTRAINT id_sucursal_fk FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal),
    CONSTRAINT id_tipo_ahorro_fk FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro)
    
);


ALTER TABLE sucursal ADD monto_ahorrado number (10) NOT NULL;
ALTER TABLE sucursal ADD cantidad_ahorro number (10) NOT NULL;


-- Solución más rapida borrar tabla y volver a crearla
CREATE TABLE sucursal( 
id_sucursal 			number(10) NOT NULL, 
nombre_sucursal 		varchar2(75) NOT NULL, 
monto_ahorrado 			number(10) NOT NULL,
cantidad_ahorro         number (10) NOT NULL,
 CONSTRAINT id_sucursal_pk    PRIMARY KEY (ID_sucursal));



CREATE SEQUENCE numero_cuenta
    START WITH 1
    INCREMENT BY 1;

CREATE TABLE ahorros(
    id_cliente NUMBER(10) NOT NULL, 
    id_sucursal NUMBER(10) NOT NULL,
    id_tipo_ahorro NUMBER(10) NOT NULL,
    numero_cuenta NUMBER(10) NOT NULL,
    tasa_interes NUMBER(10) NOT NULL,
    letra_deposito_mensual NUMBER(10) NOT NULL,
    saldo_del_ahorro NUMBER(10),
    saldo_del_interes NUMBER(10) NOT NULL,
    fecha_de_apertura DATE NOT NULL,
    fecha_de_deposito DATE NOT NULL,
    fecha_de_retiro DATE,
    fecha_de_modificacion DATE,
    usuario VARCHAR(15) NOT NULL,

    CONSTRAINT numero_cuenta_pk PRIMARY KEY (numero_cuenta), 
    CONSTRAINT id_tipo_ahorro_fk1 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro),
    CONSTRAINT id_sucursal_fk FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal));

CREATE SEQUENCE id_transaccion 
    START WITH 1
    INCREMENT BY 1;

CREATE TABLE auditoria (
id_transaccion      number (10) NOT NULL,
Tabla               varchar2(100) NOT NULL,
Tipo_operacion      char(1) NOT NULL,
id_cliente          number (10) NOT NULL,
id_tipo_ahorro      number (10) NOT NULL,
tipo_transaccion    number (1) NOT NULL,
Saldo_Anterior      number(10) NOT NULL,
monto_deposito      number (10) NOT NULL,
Saldo_Final         number(10) NOT NULL,
usuario             varchar2 (50) NOT NULL,
fecha               date NOT NULL,

CONSTRAINT PK_id_transaccion2 PRIMARY KEY (id_transaccion),
CONSTRAINT FK_id_cliente2 FOREIGN KEY (id_cliente) REFERENCES ahorros(id_cliente),
CONSTRAINT FK_id_tipo_ahorro3 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro));

CREATE TABLE transacciones(
	id_sucursal    			number (10)     NOT NULL,
	id_transaccion 			number (10)     NOT NULL,
	id_cliente     			number (10)     NOT NULL,
	id_tipo_ahorro 			number (10)     NOT NULL,
	fecha_transaccion 		date            NOT NULL,
	tipo_transaccion 		number (1)      NOT NULL,
	monto_transaccion 		number(10)      NOT NULL,
	status        		    char (1)        NOT NULL,
	fecha_insersion 		date            NOT NULL,
	usuario           		varchar2(50)    NOT NULL,
	CONSTRAINT id_transaccion_pk  PRIMARY KEY (id_transaccion),
	CONSTRAINT id_cliente_fk2     FOREIGN KEY (id_cliente) REFERENCES ahorros(id_cliente),
	CONSTRAINT id_tipo_ahorro_fk2 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro),
	CONSTRAINT id_sucursal_fk2    FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal));

CREATE SEQUENCE secuencia_ahorro
    START WITH 1
    INCREMENT BY 1;
------------------Procedimiento1Gabriela----------------------------
CREATE OR REPLACE PROCEDURE insercion_tipo_ahorro(
p_descripcion         IN     tipo_de_ahorro.descripcion%TYPE,
p_tasa_interes         IN     tipo_de_ahorro.tasa_interes%TYPE) AS
BEGIN
INSERT INTO tipo_de_ahorro(id_tipo_ahorro,descripcion,tasa_interes)
VALUES (secuencia_ahorro.nextval,p_descripcion,p_tasa_interes);
END insercion_tipo_ahorro;
/
BEGIN 
tipo_de_ahorro('Navidad','0.06');
END;
/
BEGIN 
tipo_de_ahorro('Corriente','0.04');
END;
/
BEGIN 
tipo_de_ahorro('Escolar','0.06');
END;
/
CREATE SEQUENCE secuencia_sucursal
	START WITH 1
    INCREMENT BY 1;
CREATE OR REPLACE PROCEDURE insercion_sucursal(
p_nombre    	   IN sucursal.nombre_sucursal%TYPE) AS
BEGIN
INSERT INTO sucursal(id_sucursal,nombre_sucursal,monto_ahorrado,cantidad_ahorro)
VALUES (secuencia_sucursal.nextval,p_nombre,0,0); 
END insercion_sucursal;
/
BEGIN
insercion_sucursal('Dorado');
END;
/
BEGIN
insercion_sucursal('Chepo');
END;
/
BEGIN
insercion_sucursal('Chorrera');
END;
/

CREATE OR REPLACE PROCEDURE insercion_sucursal_ahorro(
p_sucursal        IN    Sucursal_tipo_ahorro.id_sucursal%TYPE,
p_tipo_ahorro     IN    Sucursal_tipo_ahorro.id_tipo_ahorro%TYPE) AS
BEGIN
INSERT INTO Sucursal_tipo_ahorro(id_sucursal,id_tipo_ahorro,monto_ahorrado,cantidad_tipo_ahorro)
VALUES (p_sucursal,p_tipo_ahorro,0,0);
END insercion_sucursal_ahorro;
BEGIN
insercion_sucursal_ahorro(1,2);
END;
/
BEGIN
insercion_sucursal_ahorro(2,3);
END;
/
BEGIN
insercion_sucursal_ahorro(3,1);
END;
/
-------------------Procedimiento2Airlenys----------------------------

CREATE OR REPLACE PROCEDURE insercion_ahorro(
p_id_cliente             IN ahorros.id_cliente%TYPE,
p_sucursal               IN ahorros.id_sucursal%TYPE,
p_tipo_ahorro            IN ahorros.id_tipo_ahorro%TYPE,
p_numero_cuenta          IN ahorros.numero_cuenta%TYPE,
p_tasa_de_interes        IN ahorros.tasa_de_interes%TYPE,
p_letra_deposito_mensual IN ahorros.letra_deposito_mensual%TYPE,


BEGIN
    
    INSERT INTO ahorros (id_cliente, id_sucursal, id_tipo_ahorro, numero_cuenta, tasa_de_interes, letra_deposito_mensual, saldo_del_ahorro,saldo_del_interes, fecha_de_apertura, fecha_de_deposito,fecha_de_retiro,fecha_de_modificacion, usuario)
    values (p_id_cliente, p_sucursal, p_tipo_ahorro, numero_cuenta.nextval, p_tasa_de_interes, p_letra_deposito_mensual, 0,0, sysdate, sysdate,null,sysdate, user);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');

END insercion_ahorro;
/

BEGIN
insercion_ahorro (1,1,1,0.06,20) 
END;
/

BEGIN
insercion_ahorro (2,1,1,0.06,50) 
END;
/

BEGIN
insercion_ahorro (3,1,1,0.06,10) 
END;
/

BEGIN
insercion_ahorro (1,1,2,0.06,5) 
END;
/

BEGIN
insercion_ahorro (1,3,3,0.06,5) 
END;
/

BEGIN
insercion_ahorro (2,3,2,0.06,100) 
END;
/

BEGIN
insercion_ahorro (3,2,3,0.06,20) 
END;
/

BEGIN
insercion_ahorro (3,2,2,0.06,15) 
END;
/

BEGIN
insercion_ahorro (4,1,2,0.06,20) 
END;
/

BEGIN
insercion_ahorro (4,2,3,0.06,5) 
END;
/



------------------Procedimiento3MiChael----------------------------
CREATE SEQUENCE secuencia_transaccion
    START WITH 1
    INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE registro_transaccion(
p_id_sucursal    transacciones.id_sucursal%TYPE,
p_id_cliente   transacciones.id_cliente%TYPE,
p_id_tipo_ahorro   transacciones.id_tipo_ahorro%TYPE,
p_tipo_transaccion  transacciones.tipo_transaccion%TYPE,
p_monto_transaccion    transacciones.monto_transaccion%TYPE) AS

BEGIN
INSERT INTO transacciones(id_sucursal,id_transaccion,id_cliente,id_tipo_ahorro,fecha_transaccion,tipo_transaccion,monto_transaccion,status,fecha_insersion,usuario)
VALUES (p_id_sucursal,secuencia_transaccion.nextval,p_id_cliente,p_id_tipo_ahorro,sysdate,p_tipo_transaccion,p_monto_transaccion,'N',sysdate,user);
END registro_transaccion;
/
BEGIN
registro(1, 1, 2, 2, 175.00);
/
END;
BEGIN
registro(2, 3, 1, 1, 74.00);
/
END;
BEGIN
registro(2, 2, 3, 2, 95.00);
/
END;



------------------Procedimiento4Joel----------------------------
CREATE OR REPLACE FUNCTION calculo_interes(
    p_monto_transaccion IN transacciones.monto_transaccion%TYPE,
    p_tasa_interes IN tipo_de_ahorro.tasa_interes%TYPE)
    RETURN ahorros.saldo_del_interes%TYPE IS 
BEGIN
    RETURN p_monto_transaccion*p_tasa_interes;
END calculo_interes;

CREATE OR REPLACE PROCEDURE actualizacion_pago AS
v_id_sucursal       	transacciones.id_sucursal%TYPE,
v_id_transaccion    	transacciones.id_transaccion%TYPE,
v_id_cliente        	transacciones.id_cliente%TYPE,
v_id_tipo_ahorro    	transacciones.id_tipo_ahorro%TYPE,
v_monto_transaccion  	transacciones.monto_transaccion%TYPE,
v_fecha_insersion       transacciones.fecha_insersion%TYPE,
v_fecha_transaccion     transacciones.fecha_transaccion%TYPE,
v_saldo_ahorro          ahorros.saldo_ahorro%TYPE,
v_saldo_interes         ahorros.saldo_interes%TYPE,
v_tasa_interes          ahorros.tasa_interes%TYPE,
v_calculo_interes       tipo_de_ahorro.tasa_interes%TYPE,


CURSOR c_actualizar IS
SELECT id_sucursal, id_transaccion, id_cliente, id_tipo_ahorro, monto_transaccion, fecha_insersion, fecha_transaccion
FROM transacciones
WHERE STATUS = 'N' AND (tipo_transaccion = 1 OR tipo_transaccion = 2);
BEGIN
    OPEN c_actualizar;
    LOOP
        FETCH c_actualizar INTO v_id_sucursal, v_id_transaccion, v_id_cliente, v_id_tipo_ahorro, v_monto_transaccion, v_fecha_insersion, v_fecha_transaccion;
        EXIT WHEN c_actualizar%NOTFOUND;
        SELECT saldo_ahorro, saldo_interes,tasa_interes
        INTO   v_saldo_ahorro,v_saldo_interes,v_tasa_interes
        FROM ahorros
        WHERE id_cliente = v_id_cliente AND id_tipo_ahorro = v_id_tipo_ahorro;
        v_calculo_interes = calculo_interes (v_monto_transaccion,v_tasa_interes)
        IF (id_tipo_ahorro = 1 OR id_tipo_ahorro = 2) AND tipo_transaccion = 1 THEN
        	UPDATE ahorros
        	SET saldo_ahorro = saldo_ahorro + v_monto_transaccion + v_calculo_interes,
        	    saldo_interes = v_monto_transaccion + v_calculo_interes,
        	WHERE id_cliente = v_id_cliente AND id_tipo_ahorro = v_id_tipo_ahorro;
        ELSEIF id_tipo_ahorro = 3 THEN
        	IF tipo_transaccion = 1 THEN
        		UPDATE ahorros
        		SET saldo_ahorro = saldo_ahorro + v_monto_transaccion
        		WHERE id_cliente = v_id_cliente AND id_tipo_ahorro = v_id_tipo_ahorro;
        	ELSE
        		UPDATE ahorros
        		SET saldo_ahorro = saldo_ahorro - v_monto_transaccion
        		WHERE id_cliente = v_id_cliente AND id_tipo_ahorro = v_id_tipo_ahorro;
        ELSE
        	DBMS_OUTPUT.PUT_LINE("No puede realizar retiro de una cuenta escolar o navidad");
    UPDATE transacciones
    SET STATUS = 'S'
    WHERE id_cliente = v_id_cliente; 
    END LOOP;
    CLOSE c_actualizar;
EXCEPTION
    WHEN CURSOR_ALREADY_OPEN THEN
      DBMS_OUTPUT.PUT_LINE('CURSOR YA ABIERTO.');
END actualizacion_pago;

------------------Trigger1Joel----------------------------
CREATE OR REPLACE TRIGGER actualizacion_sucursal
AFTER UPDATE ON ahorros FOR EACH ROW
DECLARE
v_saldo_ahorro ahorros.saldo_ahorro%TYPE;
v_id_sucursal  ahorros.id_sucursal%TYPE;
BEGIN
    SELECT saldo_ahorro,id_sucursal
    INTO v_saldo_ahorro,v_id_sucursal
    FROM ahorros;

    UPDATE sucursal
    SET monto_ahorrado = monto_ahorrado + v_saldo_ahorro,
        cantidad_ahorro = cantidad_ahorro + 1
    WHERE id_sucursal = v_id_sucursal;
END actualizacion_sucursal;
/
------------------Trigger2Gabriela----------------------------
CREATE OR REPLACE TRIGGER actualizacion__sucursal_tipo_ahorro
AFTER UPDATE ON ahorros FOR EACH ROW
DECLARE
v_id_tipo_ahorro     ahorros.id_tipo_ahorro%TYPE;
v_saldo_ahorro       ahorros.saldo_ahorro%TYPE;

BEGIN
    SELECT  id_tipo_ahorro, saldo_ahorro 
    INTO  v_id_tipo_ahorro, v_saldo_ahorro 
    FROM ahorros ;

    UPDATE Sucursal_tipo_ahorro
    SET monto_ahorrado = monto_ahorrado + v_saldo_ahorro,
        cantidad_tipo_ahorro = cantidad_tipo_ahorro + 1
    WHERE id_tipo_ahorro = v_id_tipo_ahorro;
END actualizacion__sucursal_tipo_ahorro;
/
------------------Trigger3Airlenys----------------------------
CREATE OR REPLACE TRIGGER carga_auditoria
AFTER UPDATE OR INSERT OR DELETE ON transacciones FOR EACH ROW

DECLARE
v_id_cliente        	transacciones.id_cliente%TYPE,
v_id_tipo_ahorro    	transacciones.id_tipo_ahorro%TYPE,
v_tipo_transaccion      transacciones.tipo_transaccion%TYPE,
v_monto_transaccion  	transacciones.monto_transaccion%TYPE,
v_saldo_del_ahorro      ahorros.saldo_ahorro%TYPE,

BEGIN

    SELECT t.id_cliente, t.id_tipo_ahorro, t.tipo_transaccion, t.monto_transaccion, a.saldo_ahorro
    INTO v_id_cliente,v_id_tipo_ahorro,v_tipo_transaccion,v_monto_transaccion, v_saldo_del_ahorro
    FROM transacciones t AND ahorros a;

    IF INSERTING THEN
        INSERT INTO auditoria (id_transaccion, Tabla, Tipo_operacion, id_cliente, id_tipo_ahorro, tipo_transaccion, Saldo_Anterior, monto_deposito, Saldo_Final, usuario, fecha) 
        VALUES (secuencia_auditoria.nextval , 'transacciones','I', V_id_cliente, v_id_tipo_ahorro, v_tipo_transaccion, :0ld.v_saldo_del_ahorro, v_monto_transaccion, :new.v_saldo_del_ahorro, user, sysdate);
    
    ELSIF UPDATING THEN
        INSERT INTO auditoria (id_transaccion, Tabla, Tipo_operacion, id_cliente, id_tipo_ahorro, tipo_transaccion, Saldo_Anterior, monto_deposito, Saldo_Final, usuario, fecha) 
        VALUES (secuencia_auditoria.nextval , 'transacciones','U', V_id_cliente, v_id_tipo_ahorro, v_tipo_transaccion,  :0ld.v_saldo_del_ahorro, v_monto_transaccion, :new.v_saldo_del_ahorro, user, sysdate);
    
    ELSIF DELETING THEN
        INSERT INTO auditoria (id_transaccion, Tabla, Tipo_operacion, id_cliente, id_tipo_ahorro, tipo_transaccion, Saldo_Anterior, monto_deposito, Saldo_Final, usuario, fecha) 
        VALUES (secuencia_auditoria.nextval , 'transacciones','D', V_id_cliente, v_id_tipo_ahorro, v_tipo_transaccion, :0ld.v_saldo_del_ahorro, v_monto_transaccion, :new.v_saldo_del_ahorro, user, sysdate);
    END IF;

END carga_auditoria;
/



------------------Procedimiento5Michael----------------------------
CREATE OR REPLACE FUNCTION Calculo_interes (
p_saldoact ahorros.saldo_del_ahorro%TYPE,
p_interes ahorros.tasa_interes%TYPE)
RETURN NUMBER IS
v_tasatotal NUMBER;
v_interes ahorros.tasa_interes%TYPE;
BEGIN
 v_interes:=(p_interes/100);
 v_tasatotal:= p_saldoact*v_interes;
RETURN v_tasatotal;
END Calculo_interes;
/

CREATE OR REPLACE PROCEDURE intereses AS
    v_id_cliente ahorros.id_cliente%TYPE, 
    `v_id_sucursal ahorros.id_sucursal%TYPE,`
    v_id_tipo_ahorro ahorros.id_tipo_ahorro%TYPE,
    v_numero_cuenta ahorros.numero_cuenta%TYPE,
    v_tasa_interes ahorros.tasa_interes%TYPE,
    v_letra_deposito_mensual ahorros.letra_deposito_mensual%TYPE,
    v_saldo_del_ahorro ahorros.saldo_del_ahorro%TYPE,
    v_saldo_del_interes ahorros.saldo_del_interes%TYPE,
    `v_fecha_de_apertura ahorros.fecha_de_apertura%TYPE,`
    `v_fecha_de_deposito ahorros.fecha_de_deposito%TYPE,`
    `v_fecha_de_retiro ahorros.fecha_de_retiro%TYPE,`
    v_fecha_de_modificacion ahorros.fecha_de_modificacion%TYPE,
    v_usuario ahorros.usuario%TYPE,

    v_interestotal ahorros.tasa_interes%TYPE,
    v_nuevo ahorros.saldo_del_ahorro%TYPE;

CURSOR c_tipo_cuenta IS
SELECT * IS
FROM ahorros
WHERE id_tipo_ahorro = 'Corriente';

BEGIN
OPEN c_tipo_cuenta;
LOOP
    FETCH c_tipo_cuenta INTO v_id_cliente, v_id_tipo_ahorro, v_numero_cuenta, v_tasa_interes, v_letra_deposito_mensual, v_saldo_del_ahorro, v_saldo_del_interes
    v_fecha_de_modificacion, v_usuario, v_interestotal, v_nuevo;
    EXIT WHEN c_tipo_cuenta%NOTFOUND;
END LOOP;

 v_interestotal:= Calculo_interes(v_saldo_del_ahorro,v_tasa_interes);
 v_nuevo:= v_interestotal + v_saldo_del_ahorro; 

UPDATE ahorro SET tasa_interes = v_interestotal WHERE id_tipo_ahorro = v_id_tipo_ahorro;
UPDATE ahorro SET saldo_del_ahorro = v_nuevo WHERE id_tipo_ahorro = v_id_tipo_ahorro;

CLOSE c_tipo_cuenta;
COMMIT;
END intereses;