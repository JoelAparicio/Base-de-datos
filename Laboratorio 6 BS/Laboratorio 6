CREATE TABLE tipo_de_ahorro(
    id_tipo_ahorro 			number (10) NOT NULL,
    descripcion 			varchar2 (200) NOT NULL,
    tasa_interes 			varchar2 (10) NOT NULL,
    CONSTRAINT id_tipo_ahorro_pk PRIMARY KEY (ID_tipo_ahorro));

CREATE TABLE sucursal( 
    id_sucursal 			number(10) NOT NULL, 
    nombre_sucursal 		varchar2(75) NOT NULL, 
    id_tipo_ahorro 			number (10) NOT NULL, 
    monto_ahorrado 			number(10) NOT NULL, 
    CONSTRAINT id_sucursal_pk    PRIMARY KEY (ID_sucursal),
    CONSTRAINT id_tipo_ahorro_fk FOREIGN KEY (ID_tipo_ahorro) REFERENCES tipo_de_ahorro(ID_tipo_ahorro));

CREATE SEQUENCE numero_cuenta
    START WITH 1
    INCREMENT BY 1;

CREATE TABLE ahorros(
    id_cliente NUMBER(10) NOT NULL, 
    id_sucursal NUMBER(10) NOT NULL,
    id_tipo_ahorro NUMBER(10) NOT NULL,
    numero_cuenta NUMBER(10) NOT NULL,
    tasa_de_interes NUMBER(10) NOT NULL,
    letra_deposito_mensual NUMBER(10) NOT NULL,
    saldo_del_ahorro NUMBER(10),
    saldo_del_interes NUMBER(10) NOT NULL,
    fecha_de_apertura DATE NOT NULL,
    fecha_de_deposito DATE NOT NULL,
    fecha_de_retiro DATE NOT NULL,
    fecha_de_modificacion DATE,
    usuario VARCHAR(15) NOT NULL,

    CONSTRAINT numero_cuenta_pk PRIMARY KEY (numero_cuenta), 
    CONSTRAINT id_tipo_ahorro_fk1 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro),
    CONSTRAINT id_sucursal_fk FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal));

CREATE SEQUENCE id_transaccion 
    START WITH 1
    INCREMENT BY 1;

CREATE TABLE auditoria (
id_transaccion      number (10) NOT NULL,
Tabla               number (10) NOT NULL,
Tipo_operacion      char(1) NOT NULL,
id_cliente          number (10) NOT NULL,
id_tipo_ahorro      number (10) NOT NULL,
tipo_transaccion    number (1) NOT NULL,
Saldo_Anterior      number(10) NOT NULL,
monto_deposito      number (10) NOT NULL,
Saldo_Final         number(10) NOT NULL,
usuario             varchar2 (50) NOT NULL,
fecha               date NOT NULL,

CONSTRAINT PK_Tabla PRIMARY KEY (Tabla),
CONSTRAINT FK_id_transaccion1 FOREIGN KEY (id_transaccion) REFERENCES transacciones(id_transaccion),
CONSTRAINT FK_id_cliente2 FOREIGN KEY (id_cliente) REFERENCES ahorros(id_cliente),
CONSTRAINT FK_id_tipo_ahorro3 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro));

CREATE TABLE transacciones(
	id_sucursal    			number (10)     NOT NULL,
	id_transaccion 			number (10)     NOT NULL,
	id_cliente     			number (10)     NOT NULL,
	id_tipo_ahorro 			number (10)     NOT NULL,
	fecha_transaccion 		date            NOT NULL,
	tipo_transaccion 		number (1)      NOT NULL,
	monto_transaccion 		number(10)      NOT NULL,
	status        		    char (1)        NOT NULL,
	fecha_insersion 		date            NOT NULL,
	usuario           		varchar2(50)    NOT NULL,
	CONSTRAINT id_transaccion_pk  PRIMARY KEY (id_transaccion),
	CONSTRAINT id_cliente_fk2     FOREIGN KEY (id_cliente) REFERENCES ahorros(id_cliente),
	CONSTRAINT id_tipo_ahorro_fk2 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro),
	CONSTRAINT id_sucursal_fk2    FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal));

CREATE OR REPLACE FUNCTION calculo_interes(
    p_monto_transaccion IN transacciones.monto_transaccion%TYPE,
    p_tasa_interes IN tipo_de_ahorro.tasa_interes%TYPE)
    RETURN ahorros.saldo_del_interes%TYPE IS 
BEGIN
    RETURN p_monto_transaccion*p_tasa_interes;
END calculo_interes;

CREATE OR REPLACE PROCEDURE actualizacion_pago AS
v_id_sucursal       	transacciones.id_sucursal%TYPE,
v_id_transaccion    	transacciones.id_transaccion%TYPE,
v_id_cliente        	transacciones.id_cliente%TYPE,
v_id_tipo_ahorro    	transacciones.id_tipo_ahorro%TYPE,
v_tipo_transaccion  	transacciones.tipo_transaccion%TYPE,
v_fecha_insersion       transacciones.fecha_insersion%TYPE,
v_fecha_transaccion     transacciones.fecha_transaccion%TYPE,


CURSOR c_actualizar IS
SELECT id_sucursal, id_transaccion, id_cliente, id_tipo_ahorro, tipo_transaccion, fecha_insersion, fecha_transaccion
FROM transacciones
WHERE STATUS = 'n' AND (tipo_transaccion = 1 OR tipo_transaccion = 2);
BEGIN
    OPEN c_actualizar;
    LOOP
        FETCH c_actualizar INTO v_id_sucursal,v_id_transaccion, v_id_cliente,v_id_tipo_ahorro, v_tipo_transaccion, v_fecha_insersion;
        EXIT WHEN c_actualizar_pagos%NOTFOUND;
        
    END LOOP;
    CLOSE c_actualizar;
EXCEPTION
    WHEN CURSOR_ALREADY_OPEN THEN
      DBMS_OUTPUT.PUT_LINE('CURSOR YA ABIERTO.');
END actualizacion_pago;