CREATE TABLE tipo_de_ahorro(
    id_tipo_ahorro 			number (10) NOT NULL,
    descripcion 			varchar2 (200) NOT NULL,
    tasa_interes 			number (10) NOT NULL,
    CONSTRAINT id_tipo_ahorro_pk PRIMARY KEY (ID_tipo_ahorro));

CREATE TABLE Sucursal_tipo_ahorro(
    id_sucursal         number(10),
    id_tipo_ahorro      number (10),
    monto_ahorrado      number(10) NOT NULL,
    cantidad_tipo_ahorro     number (10) NOT NULL, 
    CONSTRAINT id_sucursal_ahorro_pk PRIMARY KEY (id_sucursal,id_tipo_ahorro),
    CONSTRAINT id_sucursal_fk FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal),
    CONSTRAINT id_tipo_ahorro_fk FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro)
    
);


ALTER TABLE sucursal ADD monto_ahorrado number (10) NOT NULL;
ALTER TABLE sucursal ADD cantidad_ahorro number (10) NOT NULL;


-- Solución más rapida borrar tabla y volver a crearla
-- CREATE TABLE sucursal( 
--     id_sucursal 			number(10) NOT NULL, 
--     nombre_sucursal 		varchar2(75) NOT NULL, 
--     monto_ahorrado 			number(10) NOT NULL,
--     cantidad_ahorro         number (10) NOT NULL,
--     monto_prestamos         number(10) NOT NULL,
--     cantidad_prestamos      number (10) NOT NULL,
--     CONSTRAINT id_sucursal_pk    PRIMARY KEY (ID_sucursal),
-- );



CREATE SEQUENCE numero_cuenta
    START WITH 1
    INCREMENT BY 1;

CREATE TABLE ahorros(
    id_cliente NUMBER(10) NOT NULL, 
    id_sucursal NUMBER(10) NOT NULL,
    id_tipo_ahorro NUMBER(10) NOT NULL,
    numero_cuenta NUMBER(10) NOT NULL,
    tasa_interes NUMBER(10) NOT NULL,
    letra_deposito_mensual NUMBER(10) NOT NULL,
    saldo_del_ahorro NUMBER(10),
    saldo_del_interes NUMBER(10) NOT NULL,
    fecha_de_apertura DATE NOT NULL,
    fecha_de_deposito DATE NOT NULL,
    fecha_de_retiro DATE,
    fecha_de_modificacion DATE,
    usuario VARCHAR(15) NOT NULL,

    CONSTRAINT numero_cuenta_pk PRIMARY KEY (numero_cuenta), 
    CONSTRAINT id_tipo_ahorro_fk1 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro),
    CONSTRAINT id_sucursal_fk FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal));

CREATE SEQUENCE id_transaccion 
    START WITH 1
    INCREMENT BY 1;

CREATE TABLE auditoria (
id_transaccion      number (10) NOT NULL,
Tabla               varchar2(100) NOT NULL,
Tipo_operacion      char(1) NOT NULL,
id_cliente          number (10) NOT NULL,
id_tipo_ahorro      number (10) NOT NULL,
tipo_transaccion    number (1) NOT NULL,
Saldo_Anterior      number(10) NOT NULL,
monto_deposito      number (10) NOT NULL,
Saldo_Final         number(10) NOT NULL,
usuario             varchar2 (50) NOT NULL,
fecha               date NOT NULL,

CONSTRAINT PK_id_transaccion2 PRIMARY KEY (id_transaccion),
CONSTRAINT FK_id_cliente2 FOREIGN KEY (id_cliente) REFERENCES ahorros(id_cliente),
CONSTRAINT FK_id_tipo_ahorro3 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro));

CREATE TABLE transacciones(
	id_sucursal    			number (10)     NOT NULL,
	id_transaccion 			number (10)     NOT NULL,
	id_cliente     			number (10)     NOT NULL,
	id_tipo_ahorro 			number (10)     NOT NULL,
	fecha_transaccion 		date            NOT NULL,
	tipo_transaccion 		number (1)      NOT NULL,
	monto_transaccion 		number(10)      NOT NULL,
	status        		    char (1)        NOT NULL,
	fecha_insersion 		date            NOT NULL,
	usuario           		varchar2(50)    NOT NULL,
	CONSTRAINT id_transaccion_pk  PRIMARY KEY (id_transaccion),
	CONSTRAINT id_cliente_fk2     FOREIGN KEY (id_cliente) REFERENCES ahorros(id_cliente),
	CONSTRAINT id_tipo_ahorro_fk2 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro),
	CONSTRAINT id_sucursal_fk2    FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal));

CREATE SEQUENCE secuencia_ahorro
    START WITH 1
    INCREMENT BY 1;
------------------Procedimiento1Gabriela----------------------------
CREATE OR REPLACE PROCEDURE insercion_tipo_ahorro(
p_descripcion         IN     tipo_de_ahorro.descripcion%TYPE,
p_tasa_interes         IN     tipo_de_ahorro.tasa_interes%TYPE) AS

BEGIN

INSERT INTO tipo_de_ahorro(id_tipo_ahorro,descripcion,tasa_interes)
VALUES (secuencia_ahorro.nextval,p_descripcion,p_tasa_interes);
END insercion_tipo_ahorro;

/
BEGIN 
tipo_de_ahorro('Navidad','0.06');
END;
/
BEGIN 
tipo_de_ahorro('Corriente','0.04');
END;
/
BEGIN 
tipo_de_ahorro('Escolar','0.06');
END;
/

-------------------Procedimiento2Airlenys----------------------------

CREATE OR REPLACE PROCEDURE insercion_ahorro(
p_id_cliente             IN ahorros.id_cliente%TYPE,
p_sucursal               IN ahorros.id_sucursal%TYPE,
p_tipo_ahorro            IN ahorros.id_tipo_ahorro%TYPE,
p_numero_cuenta          IN ahorros.numero_cuenta%TYPE,
p_tasa_de_interes        IN ahorros.tasa_de_interes%TYPE,
p_letra_deposito_mensual IN ahorros.letra_deposito_mensual%TYPE,
p_saldo_del_ahorro       IN ahorros.saldo_del_ahorro%TYPE,
p_control                IN char(1)) IS 

BEGIN
        IF p_control = A THEN
        	UPDATE ahorros
        	SET saldo_del_ahorro = saldo_del_ahorro + p_saldo_del_ahorro,
        		fecha_de_deposito = sysdate,
        		fecha_de_modificacion = sysdate
        	WHERE numero_cuenta = p_numero_cuenta AND id_cliente = p_id_cliente;
        	IF SQL%NOTFOUND THEN
        		INSERT INTO ahorros (id_cliente, id_sucursal, id_tipo_ahorro, numero_cuenta, tasa_de_interes, letra_deposito_mensual, saldo_del_ahorro,saldo_del_interes, fecha_de_apertura, fecha_de_deposito,fecha_de_retiro,fecha_de_modificacion, usuario)
	        	values (p_id_cliente, p_sucursal, p_tipo_ahorro, numero_cuenta.nextval, p_tasa_de_interes, p_letra_deposito_mensual, p_saldo_del_ahorro,0, sysdate, sysdate,null,sysdate, user);
	    	END IF;

    	ELSE
			INSERT INTO ahorros (id_cliente, id_sucursal, id_tipo_ahorro, numero_cuenta, tasa_de_interes, letra_deposito_mensual, saldo_del_ahorro,saldo_del_interes, fecha_de_apertura, fecha_de_deposito,fecha_de_retiro,fecha_de_modificacion, usuario)
	        values (p_id_cliente, p_sucursal, p_tipo_ahorro, numero_cuenta.nextval, p_tasa_de_interes, p_letra_deposito_mensual, p_saldo_del_ahorro,0, sysdate, sysdate,null,sysdate, user);
	    END IF;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');

END insercion_ahorro;
/

BEGIN
insercion_ahorro (1,1,1,1,0.06,20,100,'A') 
END;
/


------------------Procedimiento3MiChael----------------------------
CREATE SEQUENCE secuencia_transaccion
    START WITH 1
    INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE registro_transaccion(
p_id_sucursal    transacciones.id_sucursal%TYPE,
p_id_cliente   transacciones.id_cliente%TYPE,
p_id_tipo_ahorro   transacciones.id_tipo_ahorro%TYPE,
p_tipo_transaccion  transacciones.tipo_transaccion%TYPE,
p_monto_transaccion    transacciones.monto_transaccion%TYPE) AS

BEGIN
INSERT INTO transacciones(id_sucursal,id_transaccion,id_cliente,id_tipo_ahorro,fecha_transaccion,tipo_transaccion,monto_transaccion,status,fecha_insersion,usuario)
VALUES (p_id_sucursal,secuencia_transaccion.nextval,p_id_cliente,p_id_tipo_ahorro,sysdate,p_tipo_transaccion,p_monto_transaccion,'N',sysdate,user);
END registro_transaccion;
/
BEGIN
registro(1, 1, 2, 2, 175.00);
/
END;
BEGIN
registro(2, 3, 1, 1, 74.00);
/
END;
BEGIN
registro(2, 2, 3, 2, 95.00);
/
END;



------------------Procedimiento4Joel----------------------------
CREATE OR REPLACE FUNCTION calculo_interes(
    p_monto_transaccion IN transacciones.monto_transaccion%TYPE,
    p_tasa_interes IN tipo_de_ahorro.tasa_interes%TYPE)
    RETURN ahorros.saldo_del_interes%TYPE IS 
BEGIN
    RETURN p_monto_transaccion*p_tasa_interes;
END calculo_interes;

CREATE OR REPLACE PROCEDURE actualizacion_pago AS
v_id_sucursal       	transacciones.id_sucursal%TYPE,
v_id_transaccion    	transacciones.id_transaccion%TYPE,
v_id_cliente        	transacciones.id_cliente%TYPE,
v_id_tipo_ahorro    	transacciones.id_tipo_ahorro%TYPE,
v_monto_transaccion  	transacciones.monto_transaccion%TYPE,
v_fecha_insersion       transacciones.fecha_insersion%TYPE,
v_fecha_transaccion     transacciones.fecha_transaccion%TYPE,
v_saldo_ahorro          ahorros.saldo_ahorro%TYPE,
v_saldo_interes         ahorros.saldo_interes%TYPE,
v_tasa_interes          ahorros.tasa_interes%TYPE,
v_calculo_interes       tipo_de_ahorro.tasa_interes%TYPE,


CURSOR c_actualizar IS
SELECT id_sucursal, id_transaccion, id_cliente, id_tipo_ahorro, monto_transaccion, fecha_insersion, fecha_transaccion
FROM transacciones
WHERE STATUS = 'N' AND (tipo_transaccion = 1 OR tipo_transaccion = 2);
BEGIN
    OPEN c_actualizar;
    LOOP
        FETCH c_actualizar INTO v_id_sucursal, v_id_transaccion, v_id_cliente, v_id_tipo_ahorro, v_monto_transaccion, v_fecha_insersion, v_fecha_transaccion;
        EXIT WHEN c_actualizar%NOTFOUND;
        SELECT saldo_ahorro, saldo_interes,tasa_interes
        INTO   v_saldo_ahorro,v_saldo_interes,v_tasa_interes
        FROM ahorros
        WHERE id_cliente = v_id_cliente AND id_tipo_ahorro = v_id_tipo_ahorro;
        v_calculo_interes = calculo_interes (v_monto_transaccion,v_tasa_interes)
        IF (id_tipo_ahorro = 1 OR id_tipo_ahorro = 2) AND tipo_transaccion = 1 THEN
        	UPDATE ahorros
        	SET saldo_ahorro = v_monto_transaccion + v_calculo_interes,
        	    saldo_interes = v_monto_transaccion + v_calculo_interes,
        	WHERE id_cliente = v_id_cliente AND id_tipo_ahorro = v_id_tipo_ahorro AND id_sucursal = v_id_sucursal;
        ELSEIF id_tipo_ahorro = 3 THEN
        	IF tipo_transaccion = 1 THEN
        		UPDATE ahorros
        		SET saldo_ahorro = saldo_ahorro + v_monto_transaccion
        		WHERE id_cliente = v_id_cliente AND id_tipo_ahorro = v_id_tipo_ahorro AND id_sucursal = v_id_sucursal;
        	ELSE
        		UPDATE ahorros
        		SET saldo_ahorro = saldo_ahorro - v_monto_transaccion
        		WHERE id_cliente = v_id_cliente AND id_tipo_ahorro = v_id_tipo_ahorro AND id_sucursal = v_id_sucursal;
        ELSE
        	DBMS_OUTPUT.PUT_LINE("No puede realizar retiro de una cuenta escolar o navidad");
    UPDATE transacciones
    SET STATUS = 'S'
    WHERE id_cliente = v_id_cliente; 
    END LOOP;
    CLOSE c_actualizar;
EXCEPTION
    WHEN CURSOR_ALREADY_OPEN THEN
      DBMS_OUTPUT.PUT_LINE('CURSOR YA ABIERTO.');
END actualizacion_pago;


