SET SERVEROUTPUT ON
CREATE TABLE tipo_correo(
    tipo_correoID   number (10),
    descripcion     varchar2 (75) not null,
    CONSTRAINT tipo_correoID_pk PRIMARY KEY (tipo_correoID));
CREATE TABLE tipo_telefono(
    telefonoID      number (10),
    descripcion     varchar2 (50) not null,
    CONSTRAINT telefonoID_pk PRIMARY KEY (telefonoID));
CREATE TABLE tipo_de_ahorro(
    id_tipo_ahorro 			number (10) NOT NULL,
    descripcion 			varchar2 (200) NOT NULL,
    tasa_interes 			number (5,4) NOT NULL,
    CONSTRAINT id_tipo_ahorro_pk PRIMARY KEY (ID_tipo_ahorro));
CREATE TABLE profesion(
    id_profesion    number(10),
    profesion       VARCHAR2(150) NOT NULL,
    CONSTRAINT id_profesion PRIMARY KEY (id_profesion));
CREATE TABLE cliente(
    id_cliente      number(10),
    cedula          varchar2(12) not null,
    nombre          varchar2(25) not null,
    apellido        varchar2(25) not null,
    sexo            char not null,
    id_profesion    number (10),
    fecha_nacimiento date,
    CONSTRAINT id_cliente PRIMARY KEY (id_cliente),
    CONSTRAINT fk_id_profesion FOREIGN KEY (id_profesion) REFERENCES profesion(id_profesion));
CREATE TABLE correo(
    id_cliente      number(10),
    tipo_correoID   number (10),
    correo          VARCHAR2(100) not null,
    CONSTRAINT id_cliente_tipo_correo_pk PRIMARY KEY (id_cliente,tipo_correoID),
    CONSTRAINT id_cliente_correo_fk FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente),
    CONSTRAINT tipo_correoID_fk FOREIGN KEY (tipo_correoID) REFERENCES tipo_correo(tipo_correoID));
CREATE TABLE telefono(
    id_cliente      number(10),
    telefonoID      number (10),
    telefono        varchar (9) not null,
    CONSTRAINT id_cliente_telefonoID_pk PRIMARY KEY (id_cliente,telefonoID),
    CONSTRAINT id_cliente_telefono_fk FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente),
    CONSTRAINT telefonoID_fk FOREIGN KEY (telefonoID) REFERENCES tipo_telefono(telefonoID));
CREATE TABLE sucursal( 
    id_sucursal 			number(10) NOT NULL, 
    nombre_sucursal 		varchar2(75) NOT NULL, 
    monto_ahorrado 			number(10) NOT NULL,
    cantidad_ahorro         number (10) NOT NULL,
    CONSTRAINT id_sucursal_pk    PRIMARY KEY (ID_sucursal));
CREATE TABLE Sucursal_tipo_ahorro(
    id_sucursal             number(10),
    id_tipo_ahorro          number (10),
    monto_ahorrado          number(10) NOT NULL,
    cantidad_tipo_ahorro    number (10) NOT NULL, 
    CONSTRAINT id_sucursal_ahorro_pk PRIMARY KEY (id_sucursal,id_tipo_ahorro),
    CONSTRAINT id_sucursal_fk FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal),
    CONSTRAINT id_tipo_ahorro_fk FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro));
CREATE TABLE ahorros(
    id_cliente              NUMBER(10) NOT NULL, 
    id_sucursal             NUMBER(10) NOT NULL,
    id_tipo_ahorro          NUMBER(10) NOT NULL,
    numero_cuenta           NUMBER(10) NOT NULL,
    tasa_interes            NUMBER(5,4) NOT NULL,
    letra_deposito_mensual  NUMBER(10) NOT NULL,
    saldo_del_ahorro        NUMBER(10),
    saldo_del_interes       NUMBER(10) NOT NULL,
    fecha_de_apertura       DATE NOT NULL,
    fecha_de_deposito       DATE NOT NULL,
    fecha_de_retiro         DATE,
    fecha_de_modificacion   DATE,
    usuario                 VARCHAR(15) NOT NULL,
    CONSTRAINT numero_cuenta_pk2 PRIMARY KEY (numero_cuenta), 
    CONSTRAINT id_cliente_fk12 FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente),
    CONSTRAINT id_tipo_ahorro_fk12 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro),
    CONSTRAINT id_sucursal_fk12 FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal));
ALTER TABLE cliente ADD edad number(3) not null;
ALTER TABLE cliente ADD id_sucursal number(10) NOT NULL; 
ALTER TABLE cliente ADD CONSTRAINT fk_id_sucursal_cliente FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal); 
CREATE TABLE auditoria (
    id_transaccion      number (10) NOT NULL,
    Tabla               varchar2(100) NOT NULL,
    Tipo_operacion      char(1) NOT NULL,
    id_cliente          number (10) NOT NULL,
    id_tipo_ahorro      number (10) NOT NULL,
    tipo_transaccion    number (1) NOT NULL,
    Saldo_Anterior      number(10) NOT NULL,
    monto_deposito      number (10) NOT NULL,
    Saldo_Final         number(10) NOT NULL,
    usuario             varchar2 (50) NOT NULL,
    fecha               date NOT NULL,
    CONSTRAINT PK_id_transaccion2 PRIMARY KEY (id_transaccion),
    CONSTRAINT FK_id_cliente2 FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente),
    CONSTRAINT FK_id_tipo_ahorro3 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro));
CREATE TABLE transacciones(
	id_sucursal    			number (10)     NOT NULL,
	id_transaccion 			number (10)     NOT NULL,
	id_cliente     			number (10)     NOT NULL,
	id_tipo_ahorro 			number (10)     NOT NULL,
	fecha_transaccion 		date            NOT NULL,
	tipo_transaccion 		number (1)      NOT NULL,
	monto_transaccion 		number(10)      NOT NULL,
	status        		    char (1)        NOT NULL,
	fecha_insersion 		date            NOT NULL,
	usuario           		varchar2(50)    NOT NULL,
	CONSTRAINT id_transaccion_pk  PRIMARY KEY (id_transaccion),
	CONSTRAINT id_cliente_fk2     FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente),
	CONSTRAINT id_tipo_ahorro_fk2 FOREIGN KEY (id_tipo_ahorro) REFERENCES tipo_de_ahorro(id_tipo_ahorro),
	CONSTRAINT id_sucursal_fk2    FOREIGN KEY (id_sucursal) REFERENCES sucursal(id_sucursal));
CREATE SEQUENCE secuencia_cliente
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_prestamo
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_sucursal
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_profesion
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_correo
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_telefono
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_transaccion
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_ahorro
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE numero_cuenta
    START WITH 1
    INCREMENT BY 1;
CREATE SEQUENCE secuencia_auditoria
    START WITH 1
    INCREMENT BY 1;
CREATE OR REPLACE PROCEDURE tipo_correos(
    p_descripcion IN  tipo_correo.descripcion%TYPE) IS
    BEGIN 
        INSERT INTO tipo_correo(tipo_correoID, descripcion) 
        values    (secuencia_correo.nextval,p_descripcion);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END tipo_correos;
/
CREATE OR REPLACE PROCEDURE tipo_telefonos(
    p_descripcion IN Tipo_telefono.Descripcion%TYPE) IS
    BEGIN
    INSERT INTO tipo_telefono (telefonoID, descripcion)values
    (secuencia_telefono.nextval,p_descripcion);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END tipo_telefonos;
/
CREATE OR REPLACE PROCEDURE insercion_tipo_ahorro(
    p_descripcion         IN     tipo_de_ahorro.descripcion%TYPE,
    p_tasa_interes         IN     tipo_de_ahorro.tasa_interes%TYPE) AS
    BEGIN
    INSERT INTO tipo_de_ahorro(id_tipo_ahorro,descripcion,tasa_interes)
    VALUES (secuencia_ahorro.nextval,p_descripcion,p_tasa_interes);
END insercion_tipo_ahorro;
/
CREATE OR REPLACE PROCEDURE tipo_profesion(
    p_profesion IN profesion.profesion%TYPE) IS
    BEGIN 
    INSERT INTO profesion(id_profesion,profesion) values
    (secuencia_profesion.nextval,p_profesion);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END tipo_profesion;
/
CREATE OR REPLACE PROCEDURE insercion_sucursal(
p_nombre    	   IN sucursal.nombre_sucursal%TYPE) is
BEGIN
INSERT INTO sucursal(id_sucursal,nombre_sucursal,monto_ahorrado,cantidad_ahorro)
VALUES (secuencia_sucursal.nextval,p_nombre,0,0); 
END insercion_sucursal;
/
CREATE OR REPLACE PROCEDURE insercion_sucursal_ahorro(
    p_sucursal        IN    Sucursal_tipo_ahorro.id_sucursal%TYPE,
    p_tipo_ahorro     IN    Sucursal_tipo_ahorro.id_tipo_ahorro%TYPE) AS
    BEGIN
        INSERT INTO Sucursal_tipo_ahorro(id_sucursal,id_tipo_ahorro,monto_ahorrado,cantidad_tipo_ahorro)
        VALUES (p_sucursal,p_tipo_ahorro,0,0);
END insercion_sucursal_ahorro;
/
CREATE OR REPLACE FUNCTION calcular_edad(p_calculo_edad IN cliente.fecha_nacimiento%TYPE) 
    RETURN NUMBER
    AS
    v_edad NUMBER;
    BEGIN
    SELECT FLOOR(months_between(sysdate,p_calculo_edad)/12) INTO v_edad FROM dual;
    RETURN v_edad;
END calcular_edad;
/
CREATE OR REPLACE PROCEDURE insertar_cliente(
    p_cedula IN cliente.cedula%TYPE,
    p_nombre IN cliente.nombre%TYPE,
    p_apellido IN cliente.apellido%TYPE,
    p_sexo IN cliente.sexo%TYPE,
    p_profesion IN cliente.id_profesion%TYPE,
    p_fechanacimiento IN cliente.fecha_nacimiento%TYPE,
    p_sucursal IN cliente.id_sucursal%TYPE) IS 
    BEGIN
    INSERT INTO cliente (id_cliente, cedula, nombre, apellido, sexo, id_profesion, fecha_nacimiento, id_sucursal, edad) values
    (SECUENCIA_CLIENTE.nextval,p_cedula,p_nombre,p_apellido,p_sexo,p_profesion,p_fechanacimiento,p_sucursal, calcular_edad(p_fechanacimiento));
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END insertar_cliente;
/
CREATE OR REPLACE PROCEDURE insertar_correo(
    p_id_cliente IN correo.id_cliente%TYPE,
    p_cod_email IN correo.tipo_correoid%TYPE,
    p_email IN  correo.correo%TYPE) IS
    BEGIN 
        INSERT INTO correo 
        VALUES(p_id_cliente, p_cod_email, p_email);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END insertar_correo;
/
CREATE OR REPLACE PROCEDURE insertar_telefono(
    p_id_cliente IN Telefono.id_cliente%TYPE,
    p_Cod_tel IN Telefono.telefonoid%TYPE,
    p_telefono IN  Telefono.Telefono%TYPE) IS
    BEGIN 
        INSERT INTO Telefono 
        VALUES(p_id_cliente, p_Cod_tel, p_telefono);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END insertar_telefono;
/
CREATE OR REPLACE PROCEDURE insercion_ahorro(
    p_id_cliente             IN ahorros.id_cliente%TYPE,
    p_sucursal               IN ahorros.id_sucursal%TYPE,
    p_tipo_ahorro            IN ahorros.id_tipo_ahorro%TYPE,
    p_letra_deposito_mensual IN ahorros.letra_deposito_mensual%TYPE) IS
    v_tasa_interes              tipo_de_ahorro.tasa_interes%TYPE;
    BEGIN
        SELECT tasa_interes
        INTO v_tasa_interes
        FROM tipo_de_ahorro
        WHERE id_tipo_ahorro = p_tipo_ahorro;
        INSERT INTO ahorros (id_cliente, id_sucursal, id_tipo_ahorro, numero_cuenta, tasa_interes, letra_deposito_mensual, saldo_del_ahorro,saldo_del_interes, fecha_de_apertura, fecha_de_deposito,fecha_de_retiro,fecha_de_modificacion, usuario)
        values (p_id_cliente, p_sucursal, p_tipo_ahorro, numero_cuenta.nextval, v_tasa_interes, p_letra_deposito_mensual, 0,0, sysdate, sysdate,null,sysdate, user);   
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('INSERCION DUPLICADA.');
END insercion_ahorro;
/
CREATE OR REPLACE PROCEDURE registro_transaccion(
    p_id_sucursal       transacciones.id_sucursal%TYPE,
    p_id_cliente        transacciones.id_cliente%TYPE,
    p_id_tipo_ahorro    transacciones.id_tipo_ahorro%TYPE,
    p_tipo_transaccion  transacciones.tipo_transaccion%TYPE,
    p_monto_transaccion transacciones.monto_transaccion%TYPE) AS
    BEGIN
        INSERT INTO transacciones(id_sucursal,id_transaccion,id_cliente,id_tipo_ahorro,fecha_transaccion,tipo_transaccion,monto_transaccion,status,fecha_insersion,usuario)
        VALUES (p_id_sucursal,secuencia_transaccion.nextval,p_id_cliente,p_id_tipo_ahorro,sysdate,p_tipo_transaccion,p_monto_transaccion,'N',sysdate,user);
END registro_transaccion;
/
CREATE OR REPLACE FUNCTION calculo_interes(
    p_monto_transaccion IN transacciones.monto_transaccion%TYPE,
    p_tasa_interes IN ahorros.tasa_interes%TYPE)
    RETURN number IS 
    v_calculo number;
    BEGIN
    v_calculo:=p_monto_transaccion*p_tasa_interes;
        RETURN v_calculo;
END calculo_interes;
/
CREATE OR REPLACE PROCEDURE actualizacion_pago AS
    v_id_sucursal       	transacciones.id_sucursal%TYPE;
    v_id_transaccion    	transacciones.id_transaccion%TYPE;
    v_id_cliente        	transacciones.id_cliente%TYPE;
    v_id_tipo_ahorro    	transacciones.id_tipo_ahorro%TYPE;
    v_monto_transaccion  	transacciones.monto_transaccion%TYPE;
    v_fecha_insersion       transacciones.fecha_insersion%TYPE;
    v_fecha_transaccion     transacciones.fecha_transaccion%TYPE;
    v_tasa_interes          ahorros.tasa_interes%TYPE;
    v_calculo_interes       number;
    v_tipo_transaccion      transacciones.tipo_transaccion%TYPE;
    v_status                transacciones.status%TYPE;
    v_validacion            ahorros.saldo_del_ahorro%TYPE;
    CURSOR c_actualizar IS
        SELECT id_sucursal, id_transaccion, id_cliente, id_tipo_ahorro,tipo_transaccion, monto_transaccion, fecha_insersion, fecha_transaccion,status
        FROM transacciones
        WHERE status = 'N';
    BEGIN
        OPEN c_actualizar;
        LOOP
            FETCH c_actualizar INTO v_id_sucursal, v_id_transaccion, v_id_cliente, v_id_tipo_ahorro,v_tipo_transaccion, v_monto_transaccion, v_fecha_insersion, v_fecha_transaccion, v_status;            
            EXIT WHEN c_actualizar%NOTFOUND;  
            SELECT tasa_interes
            INTO  v_tasa_interes
            FROM ahorros
            WHERE id_cliente = v_id_cliente;
            v_calculo_interes := calculo_interes(v_monto_transaccion,v_tasa_interes);        
                IF v_tipo_transaccion = 1 AND v_id_tipo_ahorro = 1 OR v_id_tipo_ahorro = 3  THEN
                    UPDATE ahorros
                    SET saldo_del_ahorro = saldo_del_ahorro + v_monto_transaccion + v_calculo_interes,
                        saldo_del_interes = v_monto_transaccion + v_calculo_interes
                    WHERE id_cliente = v_id_cliente;           
                ELSIF v_id_tipo_ahorro = 2 THEN
                    IF v_tipo_transaccion = 1 THEN
                        UPDATE ahorros
                        SET saldo_del_ahorro = saldo_del_ahorro + v_monto_transaccion
                        WHERE id_cliente = v_id_cliente;  
                    ELSE
                        SELECT saldo_del_ahorro
                        INTO v_validacion
                        FROM ahorros
                        WHERE id_cliente = v_id_cliente;
                        IF v_validacion = 0 THEN
                            dbms_output.put_line('Saldo insuficiente');
                        ELSE
                            UPDATE ahorros
                            SET saldo_del_ahorro = saldo_del_ahorro - v_monto_transaccion
                            WHERE id_cliente = v_id_cliente;
                        END IF;  
                    END IF;
                ELSE
                    dbms_output.put_line('No puede realizar retiro');
                END IF;
                UPDATE transacciones
                SET status = 'S'
                WHERE id_cliente = v_id_cliente AND id_transaccion = v_id_transaccion;
        END LOOP;
            CLOSE c_actualizar;
        EXCEPTION
            WHEN CURSOR_ALREADY_OPEN THEN
            DBMS_OUTPUT.PUT_LINE('CURSOR YA ABIERTO.');
COMMIT;
END actualizacion_pago;
/
CREATE OR REPLACE TRIGGER actualizacion_sucursal
    AFTER UPDATE ON ahorros FOR EACH ROW
    BEGIN
        UPDATE sucursal
        SET monto_ahorrado = monto_ahorrado + :new.saldo_del_ahorro,
            cantidad_ahorro = cantidad_ahorro + 1
        WHERE id_sucursal = :old.id_sucursal;
END actualizacion_sucursal;
/
CREATE OR REPLACE TRIGGER actualizacion_sucursal_ahorro
    AFTER UPDATE ON ahorros FOR EACH ROW
    BEGIN
        UPDATE Sucursal_tipo_ahorro
        SET monto_ahorrado = monto_ahorrado + :new.saldo_del_ahorro,
                cantidad_tipo_ahorro = cantidad_tipo_ahorro + 1
        WHERE id_tipo_ahorro = :old.id_tipo_ahorro AND id_sucursal = :old.id_sucursal;
END actualizacion_sucursal_ahorro;
/
CREATE OR REPLACE TRIGGER carga_auditoria
    AFTER UPDATE OR INSERT OR DELETE ON ahorros FOR EACH ROW
    DECLARE
    v_tipo_transaccion           transacciones.tipo_transaccion%TYPE;
    v_monto_transaccion          transacciones.monto_transaccion%TYPE;
    v_status                     transacciones.status%TYPE;
    CURSOR c_capturar IS
        SELECT tipo_transaccion, monto_transaccion,status
        FROM transacciones
        WHERE status = 'S';
    BEGIN  
        IF INSERTING THEN
            INSERT INTO auditoria (id_transaccion, Tabla, Tipo_operacion, id_cliente, id_tipo_ahorro, tipo_transaccion, Saldo_Anterior, monto_deposito, Saldo_Final, usuario, fecha) 
            VALUES (secuencia_auditoria.nextval , 'ahorros','I', :new.id_cliente, :new.id_tipo_ahorro, 3, :new.saldo_del_ahorro, 0, :new.saldo_del_ahorro, user, sysdate);
        ELSIF UPDATING THEN
            OPEN c_capturar;
            LOOP
                FETCH c_capturar INTO v_tipo_transaccion,v_monto_transaccion,v_status;            
                EXIT WHEN c_capturar%NOTFOUND;  
                INSERT INTO auditoria (id_transaccion, Tabla, Tipo_operacion, id_cliente, id_tipo_ahorro, tipo_transaccion, Saldo_Anterior, monto_deposito, Saldo_Final, usuario, fecha) 
                VALUES (secuencia_auditoria.nextval , 'ahorros','U', :new.id_cliente, :new.id_tipo_ahorro, v_tipo_transaccion,  :old.saldo_del_ahorro, v_monto_transaccion, :new.saldo_del_ahorro, user, sysdate);
            END LOOP;
            CLOSE c_capturar;
        ELSIF DELETING THEN
            INSERT INTO auditoria (id_transaccion, Tabla, Tipo_operacion, id_cliente, id_tipo_ahorro, tipo_transaccion, Saldo_Anterior, monto_deposito, Saldo_Final, usuario, fecha) 
            VALUES (secuencia_auditoria.nextval , 'ahorros','D', :old.id_cliente, :old.id_tipo_ahorro, v_tipo_transaccion, :old.saldo_del_ahorro, v_monto_transaccion, :old.saldo_del_ahorro, user, sysdate);
        END IF;
END carga_auditoria;
/
CREATE OR REPLACE FUNCTION Calculo_interes2 (
    p_saldoact      ahorros.saldo_del_ahorro%TYPE,
    p_interes       ahorros.tasa_interes%TYPE)
    RETURN NUMBER IS
    v_tasatotal     NUMBER;
    BEGIN
        v_tasatotal:= p_saldoact*p_interes;
    RETURN v_tasatotal;
END Calculo_interes2;
/
CREATE OR REPLACE PROCEDURE pago_corriente AS
    v_id_tipo_ahorro            ahorros.id_tipo_ahorro%TYPE;
    v_numero_cuenta             ahorros.numero_cuenta%TYPE;
    v_tasa_interes              ahorros.tasa_interes%TYPE;
    v_saldo_del_ahorro          ahorros.saldo_del_ahorro%TYPE;
    v_interestotal              number;
    CURSOR c_tipo_cuenta IS
    SELECT numero_cuenta, id_tipo_ahorro,tasa_interes,saldo_del_ahorro 
    FROM ahorros
    WHERE id_tipo_ahorro = 2;
    BEGIN
        OPEN c_tipo_cuenta;
        LOOP
            FETCH c_tipo_cuenta INTO v_numero_cuenta,v_id_tipo_ahorro,v_tasa_interes,v_saldo_del_ahorro;
            EXIT WHEN c_tipo_cuenta%NOTFOUND;
            v_interestotal:= Calculo_interes2(v_saldo_del_ahorro,v_tasa_interes);
            UPDATE ahorros 
            SET saldo_del_interes = v_interestotal,
                saldo_del_ahorro = saldo_del_ahorro + v_interestotal,
                fecha_de_modificacion = sysdate + 30
            WHERE id_tipo_ahorro = v_id_tipo_ahorro AND numero_cuenta = v_numero_cuenta;
        END LOOP;
    CLOSE c_tipo_cuenta;
END pago_corriente;
/
BEGIN 
    tipo_correos('Personal');
END;
/
BEGIN 
    tipo_correos('Laboral');
END;
/
BEGIN 
    tipo_correos('Academico');
END;
/
BEGIN 
    tipo_telefonos('Celular');
END;
/
BEGIN 
    tipo_telefonos('Residencial');
END;
/
BEGIN 
    tipo_telefonos('Celular de conyugue');
END;
/
BEGIN 
    tipo_telefonos('Celular de familiar cercano');
END;
/
BEGIN 
    insercion_tipo_ahorro('Navidad',0.06);
END;
/
BEGIN 
    insercion_tipo_ahorro('Corriente',0.04);
END;
/
BEGIN 
    insercion_tipo_ahorro('Escolar',0.06);
END;
/
BEGIN 
    tipo_profesion('Camarero');
END;
/
BEGIN 
    tipo_profesion('Marinero');
END;
/
BEGIN 
    tipo_profesion('Cajero');
END;
/
BEGIN 
    tipo_profesion('Ingeniero');
END;
/
BEGIN
    insercion_sucursal('Dorado');
END;
/
BEGIN
    insercion_sucursal('Chepo');
END;
/
BEGIN
    insercion_sucursal('Chorrera');
END;
/
BEGIN
    insercion_sucursal_ahorro(1,2);
END;
/
BEGIN
    insercion_sucursal_ahorro(2,3);
END;
/
BEGIN
    insercion_sucursal_ahorro(3,1);
END;
/
BEGIN
    insertar_cliente('8-977-47','Joel','Aparicio','M',1,TO_DATE('01/12/1994','DD/MM/YYYY'),1);
END;
/
BEGIN
    insertar_cliente('8-973-789','Airlenys','Recuero','F',2,TO_DATE('01/07/1999','DD/MM/YYYY'),2);
END;
/
BEGIN
    insertar_cliente('8-923-2393','Michael','Cerrud','M',3,TO_DATE('01/06/1997','DD/MM/YYYY'),1);
END;
/
BEGIN
    insertar_cliente('8-991-4938','Gariela','Vasquez','F',4,TO_DATE('26/03/2001','DD/MM/YYYY'),2);
END;
/
BEGIN 
    insertar_correo(1, 1, 'emily.fong@gmail.com');
END;
/
BEGIN 
    insertar_correo(1, 3, 'carlos.restrepo@gmail.com');
END;
/
BEGIN 
    insertar_correo(3, 1, 'ariel.gutierrez@gmail.com');
END;
/
BEGIN 
    insertar_correo(3, 3, 'cesar.rodriguez@gmail.com');
END;
/
BEGIN 
    insertar_correo(2, 1, 'cecydi.bethancourt@gmail.com');
END;
/
BEGIN 
    insertar_correo(2, 3, 'agustin2649@gmail.com');
END;
/
BEGIN 
    insertar_correo(4, 1, 'estefanyH284@gmail.com');
END;
/
BEGIN 
    insertar_correo(4, 3, 'henryquintana@gmail.com');
END;
/
BEGIN 
    insertar_telefono(1, 1, '7463-4583');
END;
/
BEGIN 
    insertar_telefono(3, 1, '6027-1276');
END;
/
BEGIN 
    insertar_telefono(3, 2, '620-7932');
END;
/
BEGIN 
    insertar_telefono(2, 1, '6017-7294');
END;
/
BEGIN 
    insertar_telefono(2, 4, '6183-7924');
END;
/
BEGIN 
    insertar_telefono(4, 2, '604-8720');
END;
/
BEGIN 
    insertar_telefono(4, 3, '6123-8402');
END;
/
BEGIN
    insercion_ahorro (1,1,1,20);
END;
/
BEGIN
    insercion_ahorro (2,1,2,50);
END;
/
BEGIN
    insercion_ahorro (3,2,3,10);
END;
/
BEGIN
    insercion_ahorro (4,3,2,60);
END;
/
BEGIN
    registro_transaccion(1, 1, 2, 2, 175.00);
END;
/
BEGIN
    registro_transaccion(2, 3, 1, 1, 74.00);
END;
/
BEGIN
    registro_transaccion(2, 2, 3, 2, 95.00);
END;
/
BEGIN
    registro_transaccion(3, 4, 1, 1, 280.00);
END;
/
BEGIN
    actualizacion_pago;
END;
/
BEGIN
    pago_corriente;
END;
/
create or replace view ahorro_cliente as
select c.id_cliente as "Codigo de cliente",c.nombre || ' ' ||c.apellido as "Cliente", t.descripcion as "Tipo de ahorro",a.fecha_de_apertura as "Fecha de apertura",
a.saldo_del_ahorro as "Saldo del ahorro"
from cliente c , ahorros a, tipo_de_ahorro t
where t.id_tipo_ahorro = a.id_tipo_ahorro AND c.id_cliente = a.id_cliente
order by c.id_cliente asc;
/
create or replace view cliente_sucursal as
select c.id_cliente as "Codigo de cliente",c.nombre || ' ' ||c.apellido as "Cliente", t.descripcion as "Tipo de ahorro", s.nombre_sucursal as "Nombre sucursal"
from cliente c, ahorros a, tipo_de_ahorro t , sucursal s
where t.id_tipo_ahorro = a.id_tipo_ahorro AND c.id_cliente = a.id_cliente AND a.id_sucursal = s.id_sucursal   
order by c.id_cliente asc; 

select * from ahorro_cliente;
select * from cliente_sucursal;